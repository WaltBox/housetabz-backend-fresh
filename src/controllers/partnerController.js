const { Partner } = require('../models');
const crypto = require('crypto');

const partnerController = {
  /**
   * Create a new partner
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async createPartner(req, res) {
    try {
      const {
        name,
        about,
        important_information,
        logo,
        marketplace_cover,
        company_cover,
        avg_price,
        registration_code,
        person_of_contact,
        phone_number,
        email,
      } = req.body;

      // Validate required fields
      if (!name || !registration_code) {
        return res.status(400).json({ message: 'Name and Registration Code are required.' });
      }

      // Generate API keys (System-Generated)
      const api_key = crypto.randomBytes(16).toString('hex');
      const secret_key = crypto.randomBytes(32).toString('hex');

      // Create the partner record
      const partner = await Partner.create({
        name,
        about,
        important_information,
        logo,
        marketplace_cover,
        company_cover,
        avg_price,
        registration_code,
        person_of_contact,
        phone_number,
        email,
        api_key, // Generated by the system
        secret_key, // Generated by the system
      });

      // Return response with generated keys (secret_key shown only now)
      return res.status(201).json({
        message: 'Partner created successfully',
        partner: {
          id: partner.id,
          name: partner.name,
          registration_code: partner.registration_code,
          person_of_contact: partner.person_of_contact,
          phone_number: partner.phone_number,
          email: partner.email,
          api_key: partner.api_key, // Displayed for future use
          secret_key, // Displayed only once for security
        },
      });
    } catch (error) {
      console.error('Error creating partner:', error.message);
      return res.status(500).json({ message: 'An error occurred while creating the partner.' });
    }
  },

  /**
   * Fetch all partners
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async getAllPartners(req, res) {
    try {
      const partners = await Partner.findAll({
        attributes: [
          'id',
          'name',
          'registration_code',
          'person_of_contact',
          'phone_number',
          'email',
        ],
      });

      return res.status(200).json(partners);
    } catch (error) {
      console.error('Error fetching partners:', error.message);
      return res.status(500).json({ message: 'An error occurred while fetching partners.' });
    }
  },

  /**
   * Fetch a partner by ID
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async getPartnerById(req, res) {
    try {
      const { id } = req.params;

      const partner = await Partner.findByPk(id, {
        attributes: [
          'id',
          'name',
          'about',
          'important_information',
          'logo',
          'marketplace_cover',
          'company_cover',
          'avg_price',
          'registration_code',
          'person_of_contact',
          'phone_number',
          'email',
          'api_key',
          'webhook_url',
        ],
      });

      if (!partner) {
        return res.status(404).json({ message: 'Partner not found.' });
      }

      return res.status(200).json(partner);
    } catch (error) {
      console.error('Error fetching partner:', error.message);
      return res.status(500).json({ message: 'An error occurred while fetching the partner.' });
    }
  },
};

module.exports = partnerController;
